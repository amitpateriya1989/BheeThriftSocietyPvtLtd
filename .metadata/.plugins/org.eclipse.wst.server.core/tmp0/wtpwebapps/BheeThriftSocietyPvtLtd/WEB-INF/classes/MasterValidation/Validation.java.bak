package MasterValidation;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/****************************
** Validation Lib Developed By Pavan Sihore
**
****************************/

public class Validation {
	
	String regex ="";
	
	public boolean validDigits(String value){
		regex ="^\\d+$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(value);
		return matcher.matches();
	}//end validNumeric function for 0-9 number only
	
	public boolean validNumeric(String value){
		regex ="^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(value);
		return matcher.matches();
	}//end validNumeric function for number and floating number also 
	
	public boolean validAlphabet(String value){
		regex ="^[a-zA-Z]*$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(value);
		return matcher.matches();
	}//end validAlphabet function
	
	public boolean validAlphaNum(String value){
		regex ="^[a-zA-Z0-1]*$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(value);
		return matcher.matches();
	}//end validAlphaNum function
	
	public boolean validAlphaSpace(String value){
		regex ="^[a-zA-Z\\s]*$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(value);
		return matcher.matches();
	}//end validAlphaSpace function
	
	public boolean validAlphaNumSpace(String value){
		regex ="^[a-zA-Z0-1\\s]*$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(value);
		return matcher.matches();
	}//end validAlphaNumSpace function
	
	public boolean validRegEx(String value, String Regex){
		regex = Regex;
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(value);
		return matcher.matches();
	}//end validRegEx function
	
	public boolean validNotEmpty(String value){
		if(value.trim().equals("")==true){
			return false;
		}
		return true;
	}//end validNotEmpty function
	
	public boolean validMinlength(String value, int length){
		if(value.trim().length()<length){
			return false;
		}
		return true;
	}//end validMinlength function
	
	public boolean validMaxlength(String value, int length){
		if(value.trim().length()>length){
			return false;
		}
		return true;
	}//end validMaxlength function
	
	public boolean validMin(int value, int length){
		if(value<length){
			return false;
		}
		return true;
	}//end validMin function
	
	public boolean validMin(float value, float length){
		if(value<length){
			return false;
		}
		return true;
	}//end validMin function
	
	public boolean validMax(int value, int length){
		if(value>length){
			return false;
		}
		return true;
	}//end validMax function
	
	public boolean validMax(float value, float length){
		if(value>length){
			return false;
		}
		return true;
	}//end validMax function
	
	public boolean validDate(String value, String DatePattern){
		
		if(DatePattern=="DD/MM/YYYY"){
			regex = "^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$";
			Pattern pattern = Pattern.compile(regex);
			Matcher matcher = pattern.matcher(value);
			return matcher.matches();
		}else if(DatePattern=="YYYY/MM/DD"){
			regex = "^[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}$";
			Pattern pattern = Pattern.compile(regex);
			Matcher matcher = pattern.matcher(value);
			return matcher.matches();
		}else if(DatePattern=="DD-MM-YYYY"){
			regex = "^[0-9]{2}-[0-9]{2}-[0-9]{4}*$";
			Pattern pattern = Pattern.compile(regex);
			Matcher matcher = pattern.matcher(value);
			return matcher.matches();
		}else if(DatePattern=="YYYY-MM-DD"){
			regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$";
			Pattern pattern = Pattern.compile(regex);
			Matcher matcher = pattern.matcher(value);
			return matcher.matches();
		}else{
			//   DD/MM/YYYY
			//   default dateISO
			regex = "^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$";
			Pattern pattern = Pattern.compile(regex);
			Matcher matcher = pattern.matcher(value);
			return matcher.matches();
		}

	}//end validDate function
	
}//end Validation class